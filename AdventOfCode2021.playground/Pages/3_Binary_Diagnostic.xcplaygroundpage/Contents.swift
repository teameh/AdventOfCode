import Foundation

// https://adventofcode.com/2021/day/3

let testInput = [
    0b00100,
    0b11110,
    0b10110,
    0b10111,
    0b10101,
    0b01111,
    0b00111,
    0b11100,
    0b10000,
    0b11001,
    0b00010,
    0b01010
]

let input = [
    0b101001011000, 0b100000101010, 0b110000011001, 0b010000100111, 0b100111101110, 0b101110000000, 0b001010111010, 0b001101110110, 0b100100001100, 0b101011011010, 0b110011110101, 0b001000110010, 0b101110011011, 0b001010000001, 0b001101100100, 0b110000011111, 0b000100011000, 0b011001111001, 0b100101000001, 0b100000001000, 0b000001100011, 0b001011101001, 0b110000001111, 0b101010010110, 0b000110110000, 0b000011011001, 0b100010110001, 0b100010110111, 0b101000110111, 0b000011110010, 0b101011101101, 0b000000101100, 0b101100111011, 0b011101101100, 0b001010011111, 0b010000110110, 0b010010010111, 0b110010111100, 0b010001011101, 0b100101110110, 0b101011011000, 0b001011010001, 0b010101110000, 0b010001010001, 0b001011111010, 0b000100010101, 0b010111100110, 0b011001010111, 0b101010000110, 0b010010001100, 0b010101011101, 0b110111010000, 0b011111110110, 0b110010011111, 0b011000100111, 0b000111110110, 0b100111000011, 0b001101010000, 0b100011010010, 0b110101100001, 0b011110100010, 0b010100100001, 0b011000101001, 0b000110101110, 0b010100001100, 0b011100111010, 0b111010011001, 0b011000111000, 0b110011011100, 0b011010001111, 0b011011111100, 0b001101010101, 0b000000010000, 0b101111001111, 0b100011010100, 0b111111101010, 0b111001100101, 0b011010011101, 0b001110110110, 0b101010111001, 0b101111101000, 0b000101000011, 0b001001011001, 0b010000001101, 0b101000111100, 0b101101110010, 0b010010110101, 0b010110011011, 0b110100100001, 0b110010101100, 0b100110010001, 0b011100010001, 0b011111011001, 0b100000010010, 0b011111110001, 0b010010001110, 0b011100010011, 0b010101000010, 0b101101101100, 0b110001111101, 0b011100100110, 0b000100010010, 0b110001011000, 0b110100001010, 0b010011010111, 0b010000001110, 0b101101010100, 0b111100111001, 0b000111110100, 0b010100000010, 0b111100100100, 0b111011111000, 0b010010010011, 0b000111011100, 0b011110101110, 0b010111101011, 0b010001010110, 0b110110001010, 0b011111010011, 0b001110000100, 0b100011100010, 0b000101001100, 0b101100000000, 0b110110110000, 0b111111110011, 0b001101111010, 0b010000000001, 0b111010010010, 0b111111000011, 0b100100000100, 0b101010101111, 0b100110110000, 0b111110100011, 0b000011101000, 0b000111001000, 0b111110111110, 0b000000001101, 0b111101101101, 0b010101011100, 0b100001011110, 0b101001101001, 0b001001110111, 0b011100110011, 0b010110001011, 0b110100001001, 0b100100000101, 0b001010010111, 0b010111001100, 0b001000111011, 0b010111100001, 0b110100110110, 0b011101110011, 0b011010010011, 0b101001000110, 0b110101010001, 0b010101011110, 0b111010011100, 0b001000011010, 0b001001010100, 0b001100000001, 0b010000100011, 0b100101110101, 0b110110011010, 0b000100101110, 0b101111110110, 0b100100100111, 0b101000011101, 0b000111010101, 0b011011001100, 0b001010111011, 0b000011110001, 0b100001000100, 0b011001011001, 0b101110111010, 0b110100100000, 0b001111110001, 0b100100001011, 0b101000111101, 0b110101100100, 0b100111001001, 0b111011000110, 0b011101100101, 0b011000011011, 0b000100110000, 0b010011111101, 0b111010100001, 0b101110001010, 0b010000000101, 0b100101110010, 0b010011110100, 0b000110000001, 0b010100001110, 0b001110100110, 0b001110111110, 0b111000011001, 0b100111001010, 0b110101010100, 0b010111000100, 0b001010101000, 0b000001110101, 0b001011000000, 0b011101000011, 0b000110010101, 0b011110011100, 0b010000110000, 0b011101110101, 0b011100100100, 0b001100000111, 0b010110111001, 0b101010011101, 0b100010111111, 0b101011101011, 0b000000100111, 0b011011001001, 0b010110011100, 0b001101111000, 0b011010001100, 0b100001111001, 0b101011011100, 0b010100011111, 0b001111000110, 0b110011111111, 0b010101100001, 0b101110011110, 0b000010000101, 0b001000111110, 0b000010111100, 0b011010110010, 0b110101101011, 0b111010101101, 0b000000001000, 0b111000111100, 0b100011010101, 0b100001110111, 0b000011011010, 0b101011001110, 0b011001001100, 0b111110001001, 0b011000010110, 0b001001001000, 0b001001101011, 0b100010001001, 0b111111011100, 0b101110010011, 0b111010110000, 0b011101111001, 0b010010011011, 0b110011000001, 0b010011000100, 0b001001000010, 0b101000010001, 0b001100010000, 0b000011110000, 0b110100011101, 0b010100110010, 0b101110010101, 0b000000111001, 0b000100111101, 0b010101000001, 0b110011010011, 0b110010001101, 0b001000111010, 0b100010010011, 0b110111001011, 0b011011010101, 0b100111011001, 0b110111101011, 0b100101110001, 0b110110111011, 0b011100111101, 0b011111011100, 0b000111101100, 0b010101111100, 0b010000010010, 0b010101101010, 0b001100110111, 0b000000101010, 0b110111100100, 0b000001010101, 0b111111011010, 0b000000100001, 0b100101010000, 0b001100000101, 0b100101100010, 0b111001011000, 0b111001000110, 0b100010001100, 0b000100000001, 0b000000011011, 0b000011001100, 0b111011001011, 0b010011110000, 0b101001011100, 0b001110000101, 0b011110000001, 0b000011100110, 0b001100010100, 0b011101000101, 0b010011101001, 0b110000110010, 0b110110011011, 0b110100110100, 0b101111111011, 0b110010010001, 0b110010011101, 0b001101101100, 0b101110111110, 0b110001110001, 0b101000111001, 0b111001101110, 0b111000110010, 0b001111000000, 0b000000111101, 0b000011111111, 0b100011100011, 0b000001100010, 0b101000011110, 0b011111100100, 0b010101001111, 0b100111001100, 0b000011011111, 0b010001001111, 0b010100101111, 0b110100101011, 0b001101000100, 0b101101000001, 0b100010000011, 0b011001010000, 0b111101100010, 0b110010110111, 0b101111001010, 0b001111001000, 0b010110100001, 0b101101010000, 0b000010110011, 0b111011101101, 0b110111111101, 0b000101111000, 0b011011100001, 0b110110001101, 0b110010010010, 0b111001010011, 0b001001010011, 0b110110001110, 0b000011100011, 0b110000010111, 0b010000000011, 0b001111010000, 0b100101011001, 0b110111011011, 0b010100101110, 0b011101101110, 0b110101000000, 0b110001110111, 0b111010000111, 0b110101000100, 0b001101110001, 0b011100000110, 0b101010011111, 0b111011000001, 0b001111111111, 0b011110111111, 0b000110111100, 0b011100101110, 0b010001100101, 0b000000001010, 0b110001111010, 0b111011000011, 0b010011100110, 0b100111010111, 0b011011011111, 0b000110010000, 0b001101100101, 0b010110011010, 0b001011010101, 0b110111100110, 0b101011100011, 0b001011100100, 0b011000010111, 0b111010111000, 0b110011001010, 0b011110001110, 0b000111101101, 0b000111101110, 0b101100111001, 0b111101111011, 0b101001110110, 0b100100001001, 0b001001101010, 0b000110000101, 0b000101100110, 0b010101001100, 0b111100011100, 0b000010101011, 0b111000010111, 0b111001010100, 0b001010001001, 0b101110001110, 0b100111011011, 0b100011011110, 0b001010011001, 0b000101001110, 0b010111110010, 0b001111100010, 0b011010010001, 0b011001010010, 0b001100001111, 0b101010110100, 0b010111011100, 0b010001111111, 0b100001111101, 0b110101100011, 0b110101111111, 0b011010101000, 0b110011011110, 0b001000001001, 0b001001010111, 0b000101000110, 0b000111010111, 0b011001101100, 0b001101001001, 0b001111111100, 0b101010110000, 0b011101001000, 0b011101011001, 0b000001001001, 0b010111000101, 0b110010000100, 0b101010011001, 0b001010000000, 0b100100101000, 0b011110110111, 0b001110010011, 0b100100100000, 0b001110110101, 0b011100000010, 0b100001101111, 0b110010001010, 0b110101111101, 0b101001111100, 0b011101101000, 0b011110001011, 0b000110110110, 0b000101110010, 0b000000111111, 0b010000000111, 0b010000000000, 0b010100001111, 0b101010100101, 0b011011010011, 0b000001011110, 0b111010010100, 0b010110111000, 0b100001011000, 0b100110100010, 0b111101110010, 0b110111011100, 0b010011101110, 0b011101111010, 0b110100100011, 0b100001000000, 0b110011101001, 0b001110110001, 0b000001011011, 0b010110111011, 0b111101111101, 0b001010110110, 0b111000101001, 0b110010100101, 0b011110111110, 0b100001001001, 0b110111111001, 0b001110010010, 0b111110011110, 0b101111011110, 0b011000110110, 0b000000101011, 0b000100010000, 0b011001001010, 0b111001011110, 0b111010100111, 0b100010100101, 0b111011000101, 0b000010000001, 0b110010011010, 0b010101011011, 0b111010100100, 0b001101101011, 0b001100100010, 0b000010110100, 0b111001001000, 0b110101101110, 0b010000001010, 0b111010000101, 0b101110000010, 0b111000110000, 0b110010010110, 0b011101011010, 0b100010010110, 0b010010010110, 0b100100001101, 0b110010110010, 0b111110000010, 0b100110100011, 0b010110001001, 0b000100010011, 0b101000011100, 0b001101011010, 0b110001011010, 0b101110101100, 0b011110111011, 0b100101000011, 0b001011100001, 0b000011111010, 0b111011100100, 0b101110110010, 0b000010001000, 0b010010010000, 0b000111011110, 0b110000010001, 0b001110101110, 0b010100111000, 0b011100110110, 0b010110010011, 0b010000011110, 0b011110000000, 0b011010110011, 0b000101010011, 0b111101001010, 0b100110100110, 0b101101111110, 0b000000110010, 0b101110111111, 0b001111111011, 0b011110111001, 0b101110111101, 0b110010010000, 0b110010111111, 0b011010001110, 0b101000100100, 0b010001001000, 0b100101001111, 0b111010010011, 0b000010011010, 0b000001111110, 0b011111010110, 0b011011011001, 0b000000100110, 0b010001011011, 0b101010000000, 0b001100100100, 0b111111000101, 0b010111011101, 0b010010011111, 0b111011010010, 0b110100100111, 0b111011000100, 0b111111101001, 0b010101011111, 0b000100010111, 0b111001011111, 0b110001111100, 0b010111010111, 0b010011001011, 0b001011000101, 0b010111100101, 0b001101011011, 0b001100001011, 0b001001111011, 0b111111100110, 0b010001101000, 0b110100011110, 0b110011100110, 0b100001101101, 0b010101110011, 0b000101100000, 0b001010110001, 0b010101101110, 0b110001010011, 0b111100000011, 0b001101000011, 0b001111100011, 0b010001011100, 0b010010110001, 0b111000100001, 0b101100010101, 0b001001001111, 0b011100100010, 0b101001100100, 0b100101101001, 0b110100000010, 0b111010110101, 0b001000010011, 0b100110111001, 0b001011111101, 0b101111010100, 0b001101010110, 0b011010110111, 0b000000000111, 0b101110100011, 0b101001011001, 0b101111000100, 0b000110111000, 0b011101100110, 0b111111001001, 0b010110100111, 0b110011100100, 0b011111101000, 0b111101100011, 0b111000011110, 0b010111111010, 0b000010100001, 0b110011000101, 0b110100101110, 0b011110010000, 0b111011010000, 0b100011110100, 0b000001101101, 0b100100010011, 0b100010001000, 0b111000111010, 0b001000110001, 0b101010001100, 0b010111110110, 0b101011100111, 0b101001001001, 0b100111101010, 0b011101000000, 0b110011001111, 0b100000010000, 0b001010001101, 0b010010001101, 0b100010100010, 0b001101101101, 0b110010110011, 0b011010010110, 0b110101100110, 0b100110010000, 0b011100000011, 0b100000011000, 0b111100010101, 0b000100101011, 0b000101101111, 0b000100011001, 0b010010111011, 0b001010001110, 0b100001110010, 0b011110001111, 0b010001110101, 0b001110011100, 0b110100010110, 0b000101101001, 0b111110110110, 0b111110011001, 0b100011011011, 0b011110111010, 0b110000001000, 0b000101011010, 0b001000011110, 0b101011000011, 0b110010000011, 0b011000001000, 0b011001110101, 0b111111010110, 0b000010111011, 0b010001100100, 0b010111010110, 0b000000101110, 0b011010111011, 0b110101101101, 0b010010100011, 0b001010010001, 0b011011101110, 0b010100111100, 0b101101100011, 0b111010011011, 0b011101100001, 0b110000101100, 0b110111010100, 0b010010001111, 0b110001001111, 0b010001101111, 0b100010101110, 0b111011100011, 0b111000101111, 0b011000110011, 0b011110101001, 0b110101011010, 0b001001110011, 0b010010100110, 0b100000000100, 0b010111001111, 0b111101111010, 0b011010011000, 0b000010010011, 0b010001101001, 0b111010111001, 0b111001101000, 0b111100010010, 0b000011001111, 0b000010010110, 0b101101001010, 0b011010100001, 0b111110011100, 0b111011100000, 0b101101011010, 0b101001111001, 0b000100001100, 0b111101010001, 0b010110001101, 0b000101111010, 0b100100111111, 0b001001110100, 0b111000001100, 0b100000100010, 0b101010101100, 0b111111110110, 0b100000010110, 0b001101001011, 0b110000011100, 0b101100110011, 0b000101111011, 0b110111001010, 0b000000010110, 0b110001000110, 0b101101101011, 0b010001000111, 0b100010001101, 0b100010010010, 0b110000101101, 0b100110000000, 0b111100100111, 0b001111001110, 0b010000001111, 0b111100010110, 0b101100000010, 0b111001101101, 0b011111101010, 0b100100011001, 0b011100110101, 0b010001001010, 0b111100001100, 0b001010000010, 0b001001011000, 0b000001111011, 0b000001101001, 0b111111100000, 0b100010011001, 0b010011100101, 0b010110000010, 0b000101101101, 0b111101000101, 0b110001011110, 0b011111101111, 0b101000101001, 0b001010110011, 0b001110101111, 0b000100110001, 0b110110000010, 0b011110000010, 0b010110100110, 0b100000101100, 0b011001100111, 0b110110000100, 0b011001011011, 0b110001110011, 0b000000111010, 0b001110100010, 0b111101011111, 0b111011011000, 0b111011000010, 0b011111100011, 0b110011011011, 0b000000101001, 0b100100011000, 0b101000010010, 0b111111110100, 0b010001111000, 0b001110111001, 0b100100101111, 0b000010111101, 0b000111000011, 0b101100001101, 0b011101010100, 0b000001110111, 0b101000000110, 0b111111001111, 0b001010110010, 0b010001001100, 0b110001011101, 0b001101100111, 0b101110101010, 0b010101101000, 0b011101000100, 0b101001101100, 0b000001000000, 0b100001100101, 0b001011001101, 0b011111011011, 0b101110000001, 0b011111101101, 0b011111110100, 0b111010001100, 0b110010011001, 0b101110111000, 0b000110001001, 0b100001110001, 0b111111010101, 0b101100000110, 0b001000000110, 0b001111100101, 0b000101011101, 0b101010000101, 0b001111010010, 0b100100000010, 0b110101101001, 0b111110110000, 0b100101001110, 0b000111001101, 0b001000011011, 0b101001111011, 0b101111100100, 0b110110101110, 0b000010001111, 0b111011010101, 0b101000001001, 0b100001000111, 0b111111000000, 0b100010010100, 0b010010000110, 0b101110000100, 0b010110110001, 0b111010001001, 0b000101010001, 0b111100110100, 0b011001100011, 0b011100011101, 0b010000010111, 0b110011000100, 0b011011011100, 0b101001110100, 0b000011101010, 0b011011010010, 0b000011101001, 0b100010011000, 0b001101000001, 0b011110000101, 0b111001111111, 0b111110111001, 0b001011100101, 0b100001011111, 0b111011011011, 0b111110111000, 0b000111101111, 0b111110101110, 0b101001000000, 0b001001100011, 0b100111110011, 0b110110010111, 0b110001110010, 0b011000111111, 0b001100001110, 0b010001011010, 0b010111111000, 0b011110111100, 0b111111001101, 0b100100000110, 0b111110011000, 0b101101100001, 0b101110010001, 0b110000101000, 0b010111110011, 0b011010101100, 0b001000010111, 0b110111110111, 0b011001111011, 0b101110110111, 0b100011000100, 0b101111001101, 0b001010100011, 0b111110110001, 0b111100000101, 0b100000010100, 0b011011111101, 0b101100001001, 0b001100000100, 0b001010111100, 0b011101011011, 0b010010101101, 0b011011011010, 0b010000110001, 0b011110011101, 0b110110111110, 0b111100111100, 0b101110010110, 0b011000100100, 0b010101001000, 0b001101001100, 0b101010010011, 0b101010010100, 0b110111000000, 0b000100110100, 0b100111100000, 0b100111011101, 0b010110001100, 0b011101010110, 0b011101011101, 0b101001110001, 0b000110100110, 0b101010010101, 0b011110010111, 0b100100100110, 0b101001101010, 0b110011101010, 0b100100000011, 0b000110000110, 0b111001001110, 0b101010100100, 0b001100001001, 0b011111010111, 0b000010011011, 0b001000110011, 0b101101110101, 0b011111000000, 0b101001001010, 0b111010110100, 0b101101001101, 0b010011010010, 0b110001110100, 0b011111001010, 0b000100111100, 0b100101101110, 0b110011000110, 0b010001111001, 0b101001000100, 0b011111001000, 0b110111111110, 0b100101100101, 0b010000101100, 0b111001111100, 0b000101101010, 0b000101110100, 0b001100110000, 0b101000110011, 0b100000001100, 0b001101101110, 0b100100111010, 0b000100101101, 0b011111111011, 0b011111111001, 0b011011110001, 0b110111001100, 0b011101101011, 0b000001111101, 0b001100110100, 0b011000111001, 0b010010111110, 0b001000000001, 0b101011110001, 0b100000111000, 0b001000111001, 0b001001110010, 0b101111100000, 0b001010110000, 0b101010110010, 0b100111111110, 0b100011110000, 0b110000110101, 0b101101100111, 0b010110011111, 0b010000110111, 0b100110101010, 0b111110000000, 0b010110001111, 0b110110001111, 0b101011111001, 0b011010110110, 0b100101111011, 0b011001110010, 0b011100100101, 0b011111100000, 0b110110111010, 0b001001110001, 0b010111101101, 0b011000000000, 0b110101111000, 0b010110011101, 0b011001011101, 0b011100101100, 0b000101000000, 0b001000100111, 0b111110110101, 0b110100011111, 0b100100011010, 0b101111100111, 0b100010101111, 0b110100101111, 0b001100110010, 0b100001001011, 0b111110101010
]

// [010,110] -> 3
func maxBitCount(input: [Int]) -> Int {
    return input.reduce(0) { result, number in
        var num = number
        var count = 0
        while num != 0 {
            count += 1
            num >>= 1
        }
        return max(count, result)
    }
}

// [0,1,1,1,0] -> 0110
func bitArrayToInt(_ arr: [Int]) -> Int {
    arr.reduce(into: 0) {
        $0 <<= 1
        $0 += $1
    }
}

func calculateResultPuzzle1(input: [Int]) -> Int {
    let gamma = (0...maxBitCount(input: input)-1)
        .reversed()
        .map { index -> Int in
            let count = input
                .filter { number -> Bool in
                    let bit = 1 << index
                    return (number & bit) != 0
                }
                .count
            return count > input.count - count ? 1 : 0
        }

    let epsilon = gamma.map { $0 == 0 ? 1 : 0 }

    return bitArrayToInt(gamma) * bitArrayToInt(epsilon)
}

if calculateResultPuzzle1(input: testInput) != 198 {
    throw fatalError("Invalid answer!")
}


if calculateResultPuzzle1(input: input) != 4138664 {
    throw fatalError("Invalid answer!")
}

print("Answer puzzle 1: \(calculateResultPuzzle1(input: input))")

func calculateResultPuzzle2(input: [Int]) -> Int {
    var oxygenGeneratorRating: Int = 0
    var oxygenGeneratorInputNumbers = input

    var co2ScrubberRating: Int = 0
    var co2ScrubberInputNumbers = input

    (0...maxBitCount(input: input)-1)
        .reversed()
        .forEach { index in
            let isSetCount = oxygenGeneratorInputNumbers
                .filter { number -> Bool in
                    let bit = 1 << index
                    return (number & bit) != 0
                }
                .count
            let keepSetBits = isSetCount >= oxygenGeneratorInputNumbers.count - isSetCount

            oxygenGeneratorInputNumbers = oxygenGeneratorInputNumbers.filter { number in
                let bit = 1 << index
                return ((number & bit) != 0) == keepSetBits
            }

            if oxygenGeneratorInputNumbers.count == 1 {
                oxygenGeneratorRating = oxygenGeneratorInputNumbers[0]
            }

            let isSetCount2 = co2ScrubberInputNumbers
                .filter { number -> Bool in
                    let bit = 1 << index
                    return (number & bit) != 0
                }
                .count
            let keepSetBits2 = isSetCount2 >= co2ScrubberInputNumbers.count - isSetCount2

            co2ScrubberInputNumbers = co2ScrubberInputNumbers.filter { number in
                let bit = 1 << index
                return ((number & bit) == 0) == keepSetBits2
            }

            if co2ScrubberInputNumbers.count == 1 {
                co2ScrubberRating = co2ScrubberInputNumbers[0]
            }
        }
    return oxygenGeneratorRating * co2ScrubberRating
}

if calculateResultPuzzle2(input: testInput) != 230 {
    throw fatalError("Invalid answer!")
}

if calculateResultPuzzle2(input: input) != 4273224 {
    throw fatalError("Invalid answer!")
}

print("Answer puzzle 2: \(calculateResultPuzzle2(input: input))")
